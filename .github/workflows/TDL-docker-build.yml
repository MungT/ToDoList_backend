name: TDL-docker-build

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ dev, main ]

env:
  S3_BUCKET_NAME: todolist-s3
  PROJECT_NAME: ToDoToDo

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Latest Repo
        uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: '8'
          distribution: 'adopt'

        ## gradle caching (캐시를 미리 생성해 빌드시 작업시간을 단축시켜 준다.)##
      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## create application.properties
      - name: make dev application.properties
        if: contains(github.ref, 'main') # branch가 main 일 때, 나머지는 위와 동일
        run: |
          cd ./src/main/resources
          touch ./application.properties
          echo "${{ secrets.PROPERTIES }}" > ./application.properties
        shell: bash

      ## create application-aws.properties
      #      - name: make application-aws.properties
      #        if: contains(github.ref, 'dev') # 여러 branch설정은 불가능 한 듯?
      #        run: |
      #          # spring의 resources 경로로 이동
      #           cd ./src/main/resources
      #
      #           # application-aws.properties 파일 생성
      #           touch ./application-aws.properties
      #
      #           # GitHub-Actions에서 설정한 값을 application-aws.properties 파일에 쓰기
      #           echo "${{ secrets.AWS_PROPERTIES }}" > ./application-aws.properties
      #        shell: bash

      ## create application.properties
      - name: make dev application.properties
        if: contains(github.ref, 'dev') # branch가 main 일 때, 나머지는 위와 동일
        run: |
          cd ./src/main/resources
          touch ./application.properties
          echo "${{ secrets.PROPERTIES }}" > ./application.properties
        shell: bash

      ## 빌드 전 MYSQL 실행
      - name: Setup MySQL
        uses: samin/mysql-action@v1
        with:

          character set server: 'utf8'
          sql version: '8.0.23'
          mysql database: ${{ secrets.MYSQL_DBNAME }}
          mysql user: ${{ secrets.MYSQL_USERNAME }}
          mysql password: ${{ secrets.MYSQL_PASSWORD }} # github Secret 탭에서 설정하세요!

        ### Gradle ###
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Make zip file
        run: zip -r ./$GITHUB_SHA.zip .
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip

      ### 새로 추가한 부분 ###
      - name: Code Deploy
        run: aws deploy create-deployment --application-name todolist --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name todolist-group --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip




#      # Beanstalk 플러그인을 사용
#      # 미리 생성해둔 IAM 인증키를 사용
#      - name: Beanstalk Deploy
#        uses: einaregilsson/beanstalk-deploy@v20
#        with:
#          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          application_name: docker-elasticbeanstalk
#          environment_name: docker-elasticbeanstalk-env
#          version_label: "github-action--${{ steps.format-time.outputs.replaced }}"
#          region: ap-northeast-2
#          deployment_package: Dockerrun.aws.json